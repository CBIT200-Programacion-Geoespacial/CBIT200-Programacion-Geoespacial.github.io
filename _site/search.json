[
  {
    "objectID": "CursoProgramacion/01-intro.html",
    "href": "CursoProgramacion/01-intro.html",
    "title": "Introducción: Principios básicos",
    "section": "",
    "text": "Introducción\nR es un entorno y lenguaje de programación con un enfoque al análisis estadístico. Permite hacer todos los análisis numéricos que requieras en tu vida profesional. Es una implementación de libre distribución de otro programa estadístico de uso comercial, S. Al ser software libre, es la comunidad de usuarios la que guía su desarrollo, transformándolo en uno de los programas más versátiles para trabajos cuantitativos existentes hoy en día. La página principal desde la que se puede acceder a los archivos y documentación necesarias para su utilización es:\nwww.r-project.org\nSi bien R es un software que puede usarse desde la línea de comando, para trabajar utilizaremos http://www.rstudio.org.\nEste es un Entorno de Desarrollo Integrado (IDE, por su sigla en inglés) que, al igual que R, es software libre y permite integrar herramientas necesarias para el desarrollo y así facilitarlo. La página oficial para descargarlo es:\nwww.rstudio.com\nObjetos:\nEn términos genéricos, todos los elementos que R maneja son objetos. Un objeto tiene ciertas propiedades y en ocasiones es capaz de llevar a cabo ciertas tareas si se le dan los argumentos necesarios. Por ejemplo, un teléfono es capaz de realizar llamadas siempre que le demos el número a marcar.\nVariables\nAl momento de trabajar, es probable que necesitemos guardar valores o cálculos, de manera que no necesitemos escribirlos cada vez que los usemos, para esto utilizamos variables.\nPara realizar una asignación de variable:\n\n\nun ejemplo?\n\n si poh!\n\n\na = 200\n\nLuego, podemos utilizar el valor contenido en la variable, utilizando su nombre:\n\nprint(a)\n\n[1] 200\n\n\nTipos de variables:\nExisten diversos tipos o clases de variables, dependiendo de las características del objeto que les es asignado. Para conocer a qué tipo corresponde un objeto usamos class:\n\nx=7\nx\n\n[1] 7\n\nclass (x)\n\n[1] \"numeric\"\n\n\n\nx=5/3\nx\n\n[1] 1.666667\n\nclass (x)\n\n[1] \"numeric\"\n\n\n\nx=\"Trece\"\nx\n\n[1] \"Trece\"\n\nclass (x)\n\n[1] \"character\"\n\n\nFunciones:\nMuchas cosas en R pueden hacerse a través del uso de funciones, estas permiten realizar operaciones típicas sin necesidad de escribir grandes cantidades de código. Por ejemplo:\n\nsqrt(10)\n\n[1] 3.162278\n\nround(1.9)\n\n[1] 2\n\nseq(0,10)\n\n [1]  0  1  2  3  4  5  6  7  8  9 10\n\nseq(0,10,2)\n\n[1]  0  2  4  6  8 10\n\nrep(5,10)\n\n [1] 5 5 5 5 5 5 5 5 5 5\n\npaste(seq(5,10), \"elefantes\")\n\n[1] \"5 elefantes\"  \"6 elefantes\"  \"7 elefantes\"  \"8 elefantes\"  \"9 elefantes\" \n[6] \"10 elefantes\"\n\n\nLos datos o variables que van dentro de las funciones, se denominan argumentos y cada función requiere que se le entreguen los argumentos apropiados para ejecutar la acción prevista.\nPor ejemplo, la función mean() no puede calcular el promedio si como argumentos se le pasan letras.\n\nmean(c(\"a\",\"b\",\"c\"))\n\nWarning in mean.default(c(\"a\", \"b\", \"c\")): argument is not numeric or logical:\nreturning NA\n\n\n[1] NA\n\n\nEsto es importante, porque al introducir datos podemos estar utilizando números como palabras:\n1, 2, 3 ≠ “1”, “2”, “3”\nSi nos encontramos con este problema, debemos transformar los datos al tipo o clase adecuada, con las funciones:\nas.numeric() y as. character()x`\nVectores:\nConjunto ordenado de valores del mismo tipo, agrupados en un único objeto. Para crear una variable vector utilizamos:\n\nv = c(1,1,2,3)\nvector = c(\"mi\", \"primer\", \"vector\")\nvector\n\n[1] \"mi\"     \"primer\" \"vector\"\n\n\nCada objeto dentro de un vector posee un índice, el cual indica la posición que ocupa dentro del vector, para acceder a una posición específica usamos:\n\nvector[1]\n\n[1] \"mi\"\n\nvector[2]\n\n[1] \"primer\"\n\nvector[3] \n\n[1] \"vector\"\n\n\ny si queremos reemplazar alguno de esos objetos:\n\nvector[2]=\"segundo\"\nvector\n\n[1] \"mi\"      \"segundo\" \"vector\" \n\n\nUn vector permite almacenar varios valores en una única variable y permite ejecutar operaciones o funciones a un conjunto de datos:\n\nvector = c(1,2,3,4,5)\nvector*2\n\n[1]  2  4  6  8 10\n\nvector^2\n\n[1]  1  4  9 16 25\n\n\no incluso realizar operaciones entre vectores:\n\nv1=c(1:3)\nv2=c(6,8,10)\n\n\nv1\n\n[1] 1 2 3\n\nv2\n\n[1]  6  8 10\n\n\n\nv1 + v2\n\n[1]  7 10 13\n\n\n\nv1*v2\n\n[1]  6 16 30\n\n\n\nv3=c(\"a\",\"b\",\"c\")\nv1 * v3\n\nError in v1 * v3: non-numeric argument to binary operator\n\n\nData frame:\nInstalar librerías:\nMuchas veces las funciones incorporadas en R son insuficientes para nuestros fines, por lo que es necesario instalar paquetes o “packages” de herramientas hechas por la comunidad. En este caso, usaremos el paquete “openxlsx”, que nos permite leer archivos Excel. Para instalarlo:\n\ninstall.packages(\"openxlsx\")\n\nDebe hacerse una única vez, los paquetes quedan instalados en nuestra versión de R. Y para usarlo dentro de nuestro proyecto:\n\nlibrary(openxlsx)\n\nDebe incluirse en cada proyecto donde queramos usarlo y ejecutarse cada vez que abrimos R.\nR Notebook\nUn Notebook en R es un documento con bloques o “chunks” que pueden ser ejecutados directa e interactivamente, para así visualizar los resultados directamente bajo el código.\nPara instalar esta librería:\n\ninstall.packages(\"rmarkdown\")\n\nUna vez instalada, puedes crear un nuevo notebook en RStudio llendo a File -&gt; new file -&gt; R notebook.\nAgrega un nuevo chunk haciendo click en el botón Insert Chunk en la barra de herramientas o presionando Ctrl+Alt+I\nUn chunk puede ser ejecutado usando:\n\nHaciendo click en el triángulo verde o “Run Current Chunk” en la esquina superior derecha de cada chunk.\nClickeando al interior de un chunk y presionando Ctrl + Enter.\n\nDe ambas formas se ejecutará todo el código contenido dentro de el chunk.\nCuando guardas ul notebook, un archivo HTML que contiene el código y los resultados se guardará junto a él (Click en el botón de Preview o presiona Ctrl+Shift+K para previsualizar el archivo HMTL)\nLeer datos:\nDelimitados por coma: read_csv(“file.csv”)\nCon cualquier delimitador: read_delim(“file.txt”, delim = “|”)\n……..\ntidyr?\nBajar archivos de la web:\nConstrucción de set de datos:"
  }
]