{
  "hash": "2de083bbed1c06d556b06ba9ff6ce219",
  "result": {
    "markdown": "---\ntitle: \"Autocorrelación espacial\"\nauthor: \"Derek Corcoran\"\ndate: \"08/08, 2023\"\noutput:\n  ioslides_presentation:\n    widescreen: true\n    incremental: true\n---\n\n\n\n\n# Todo está relacionado con todo lo demás, pero las cosas cercanas están más relacionadas que las distantes\n\nLey de Tobler (Primera ley de la Geografía)\n\n## Autocorrelación espacial\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gstat)\nlibrary(raster)\nlibrary(rgdal)\nlibrary(rworldxtra)\nlibrary(sf)\nlibrary(sp)\nlibrary(tidyverse)\n```\n:::\n\n\n-   A veces el fenomeno tiene más que ver con proximidad que con condiciones\n\n-   Figura de COVID o de vicarianza\n\n## Base de datos meuse\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(meuse)\nMeuse <- st_as_sf(meuse, coords = c(1, 2), crs = \"+init=epsg:28992\")\ncoordinates(meuse) = ~x + y\nproj4string(meuse) <- CRS(\"+init=epsg:28992\")\nggplot() + geom_sf(data = Meuse, aes(color = zinc)) + theme_bw()\n```\n:::\n\n\n## Donde queda meuse?\n\n\n::: {.cell}\n\n:::\n\n\n## Variogramas\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Modelo nulo\nZ_vgm_null <- variogram(log(zinc) ~ 1, meuse)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Variogramas\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Modelo nulo\nZ_vgm_null <- variogram(log(zinc) ~ 1, meuse) %>%\n    mutate(Modelo = \"Nulo\")\n# Modelo Espacial\nZ_vgm_Spat <- variogram(log(zinc) ~ x + y, meuse) %>%\n    mutate(Modelo = \"Espacial\")\n# Modelo distancia\nZ_vgm_Dist <- variogram(log(zinc) ~ dist, meuse) %>%\n    mutate(Modelo = \"distancia\")\n## Modelo sqrt Dist\nZ_vgm_Dist_sq <- variogram(log(zinc) ~ sqrt(dist), meuse) %>%\n    mutate(Modelo = \"sqrt(dist)\")\nZ_vgm <- list(Z_vgm_Dist, Z_vgm_null, Z_vgm_Spat, Z_vgm_Dist_sq) %>%\n    reduce(bind_rows)\n```\n:::\n\n\n## Variograma\n\n\n::: {.cell}\n\n:::\n\n\n# Dudas\n\n## Variogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAbn_fit_Spat <- fit.variogram(Z_vgm_Spat, model = vgm(1, \"Sph\",\n    700, 1))\nAbn_fit_Spat\n```\n:::\n\n\n## fitted variogram\n\n\n::: {.cell}\n\n:::\n\n\n## Todos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAbn_fit_null <- fit.variogram(Z_vgm_null, model = vgm(1, \"Sph\",\n    700, 1))\nAbn_fit_Spat <- fit.variogram(Z_vgm_Spat, model = vgm(1, \"Sph\",\n    700, 1))\nAbn_fit_Dist <- fit.variogram(Z_vgm_Dist, model = vgm(1, \"Sph\",\n    700, 1))\nAbn_fit_Dist_sq <- fit.variogram(Z_vgm_Dist_sq, model = vgm(1,\n    \"Sph\", 700, 1))\n```\n:::\n\n\n## Predicciones para todos\n\n\n::: {.cell}\n\n:::\n\n\n## Kriging\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(meuse.grid)\nMeuse_Grid <- st_as_sf(meuse.grid, coords = c(1, 2), crs = \"+init=epsg:28992\")\ncoordinates(meuse.grid) = ~x + y\nproj4string(meuse.grid) <- CRS(\"+init=epsg:28992\")\nggplot() + geom_sf(data = Meuse_Grid, aes(color = dist)) + scale_color_viridis_c()\n```\n:::\n\n\n## Predicción\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSpat_pred <- krige(log(zinc) ~ x + y, meuse, meuse.grid, model = Abn_fit_Spat) %>%\n    st_as_sf()\n```\n:::\n\n\n## Resultado\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + geom_sf(data = Spat_pred, aes(color = exp(var1.pred))) +\n    scale_color_viridis_c(name = \"[Zinc]\") + theme_bw()\n```\n:::\n\n\n## Varianza\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + geom_sf(data = Spat_pred, aes(color = var1.var)) +\n    scale_color_viridis_c() + theme_bw()\n```\n:::\n\n\n## Predicción todos juntos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNull_pred <- krige(log(zinc) ~ 1, Meuse, Meuse_Grid, model = Abn_fit_null) %>%\n    mutate(Modelo = \"Nulo\")\nSpat_pred <- krige(log(zinc) ~ x + y, meuse, meuse.grid, model = Abn_fit_Spat) %>%\n    st_as_sf() %>%\n    mutate(Modelo = \"Espacial\")\nDist_pred <- krige(log(zinc) ~ dist, Meuse, Meuse_Grid, model = Abn_fit_Dist) %>%\n    mutate(Modelo = \"distancia\")\nDist_sq_pred <- krige(log(zinc) ~ sqrt(dist), Meuse, Meuse_Grid,\n    model = Abn_fit_Dist_sq) %>%\n    mutate(Modelo = \"sqrt(dist)\")\nPred <- list(Null_pred, Spat_pred, Dist_pred, Dist_sq_pred) %>%\n    reduce(bind_rows)\n```\n:::\n\n\n## Predicciones\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + geom_sf(data = Pred, aes(color = exp(var1.pred))) +\n    scale_color_viridis_c(name = \"[Zinc]\") + facet_wrap(~Modelo) +\n    theme_bw()\n```\n:::\n\n\n## Variaciones\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + geom_sf(data = Pred, aes(color = var1.var)) + scale_color_viridis_c() +\n    facet_wrap(~Modelo) + theme_bw()\n```\n:::\n\n\n# ¿Cómo elijo el mejor modelo?\n\n## RMSE\n\n-   Root Mean Square Error\n\n$$RMSE = \\sqrt{ \\frac{1}{N}\\sum_{i=1}^{N} (x_{i})^2}$$\n\n-   Donde x es el error\n-   Cross validation\n    -   Entrenamos el modelo con algunos datos y dejamos otros\n    -   Vemos el error al predecir los datos faltantes\n\n## krige.cv\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNull_CV <- krige.cv(log(zinc) ~ 1, meuse, model = Abn_fit_null,\n    nfold = 5) %>%\n    st_as_sf() %>%\n    mutate(Modelo = \"Nulo\")\nSpat_CV <- krige.cv(log(zinc) ~ x + y, meuse, model = Abn_fit_Spat,\n    nfold = 5) %>%\n    st_as_sf() %>%\n    mutate(Modelo = \"Espacial\")\nDist_CV <- krige.cv(log(zinc) ~ dist, meuse, model = Abn_fit_Dist,\n    nfold = 5) %>%\n    st_as_sf() %>%\n    mutate(Modelo = \"distancia\")\nDist_sq_CV <- krige.cv(log(zinc) ~ sqrt(dist), meuse, model = Abn_fit_Dist_sq,\n    nfold = 5) %>%\n    st_as_sf() %>%\n    mutate(Modelo = \"sqrt(dist)\")\nPred_CV <- list(Null_CV, Spat_CV, Dist_CV, Dist_sq_CV) %>%\n    reduce(bind_rows)\n```\n:::\n\n\n## Folds?\n\n\n::: {.cell}\n\n:::\n\n\n## Reumen y orden por RMSE\n\n\n::: {.cell}\n\n```{.r .cell-code}\nResumen <- Pred_CV %>%\n    as.data.frame() %>%\n    group_by(Modelo) %>%\n    summarise(RMSE = sqrt(sum(residual^2)/length(residual))) %>%\n    arrange(RMSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(Resumen) %>%\n    kable_styling()\n```\n:::\n\n\n## Podemos hacer algunos diagnósticos\n\n\n::: {.cell}\n\n:::\n\n\n## Entonces, ¿Hay estructura espacial?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVar <- variogram(residual ~ 1, Dist_CV)\nggplot(Var, aes(x = dist, y = gamma)) + geom_point() + theme_bw() +\n    xlab(\"Ditancia metros\") + ylim(c(0, max(Var$gamma)))\n```\n:::\n\n\n## Nos quedamos con la distancia\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "Clase9_Autocor_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}