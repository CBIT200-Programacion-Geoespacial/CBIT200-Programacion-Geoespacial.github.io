{"title":"Regresiones lineales y pivots","markdown":{"yaml":{"title":"Regresiones lineales y pivots","author":"Derek Corcoran","date":"`r format(Sys.time(), '%d/%m, %Y')`","output":{"ioslides_presentation":{"incremental":"yes","widescreen":"yes"}}},"headingText":"Modelos","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = FALSE, tidy = TRUE, tidy.opts = list(width.cutoff = 50))\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(kableExtra)\nlibrary(knitr)\noptions(\"kableExtra.html.bsTable\" = T)\n```\n\n\n## ¿Qué es un modelo?\n\n* Un modelo es una versión simplificada de la realidad que nos permite hacer inferencias o prediccións sobre una población\n* Un modelo es un resumen adecuado de la realidad\n* Un modelo es una simplificación or aproximación a la realidad y por ende no reflejará toda la realidad (Burnham y Anderson)\n* Todos los modelos estan equivocados, algunos son útiles (George Box)\n\n# Veamos un ejemplo\n\n## Altura versus DAP\n\n```{r}\ngithubURL <- (\"https://raw.githubusercontent.com/Curso-programacion/Datos_Arboles/master/Data.rds\")\ndownload.file(githubURL,\"Data.rds\", method=\"curl\")\nData <- read_rds(\"Data.rds\")\n```\n\n```{r, echo = F, include=FALSE}\nfile.remove(\"Data.rds\")\n```\n\n## Veamos los datos\n\n```{r,echo = F}\nggplot(Data, aes(y = Altura, x = DAP)) + geom_point() + theme_bw()\n```\n\n\n## Formula de un modelo\n\n```{r, echo = TRUE, eval=FALSE}\nalguna_funcion(Y ~ X1 + X2 + ... + Xn, data = data.frame)\n```\n\n* **Y:** Variable respuesta (Altura)\n* **`~`:** Explicado por\n* **$X_n$:** Variable explicativa n (DAP)\n* **data.frame:*** Base de datos (Data)\n* **alguna_funcion:** El modelo a testear (nuestra simplificación de la realidad)\n\n## Algunos modelos en R\n\n```{r Modelos, echo = FALSE}\nModelos <- data.frame(Modelos = c(\"Prueba de t\" ,\"ANOVA\", \"Modelo lineal simple\", \"modelo lineal generalizado\", \"Modelo aditivo\", \"Modelo no lineal\", \"modelos lineales mixtos\", \"Boosted regression trees\"), Funcion = c(\"t.test()\", \"aov()\", \"lm()\", \"glm()\", \"gam()\", \"nls()\", \"lmer()\", \"gbm()\"))\n\nkable(Modelos, row.names = FALSE) %>% kable_styling(bootstrap_options = \"striped\")\n```\n\n# Modelo lineal\n\n## Ejemplo\n\n```{r, echo = T}\nModelo <- lm(Altura ~ DAP, data = Data)\n\nParametros <- broom::tidy(Modelo)\n```\n\n```{r, echo = F}\nkable(Parametros, row.names = FALSE, digits = 3) %>% kable_styling(bootstrap_options = \"striped\")\n```\n\n## Veamos el modelo\n\n```{r, echo=FALSE}\nIntercepto <- Parametros %>% dplyr::filter(term == \"(Intercept)\") %>% pull(estimate)\nBeta <- Parametros %>% dplyr::filter(term != \"(Intercept)\") %>% pull(estimate)\n\nggplot(Data, aes(y = Altura, x = DAP)) + geom_point() + geom_function(fun = function(x) Intercepto + Beta*x) + theme_bw()\n```\n```{r, echo = F, results='asis'}\nequatiomatic::extract_eq(Modelo, use_coefs = T)\n```\n\n## Veámoslo gráficamente desde más cerca\n\n```{r, echo = F}\nDataIn<- Data %>% dplyr::filter(DAP >= 0 & DAP <= 10) \nlibrary(ggrepel)\nggplot(DataIn, aes(y = Altura, x = DAP)) + \n  geom_function(fun = function(x) Intercepto + Beta*x) + \n  theme_bw() + xlim(c(0,10)) + \n  geom_point(x = 0, y = Intercepto, color = \"red\") + \n  geom_label_repel(data = data.frame(x= 0, y = Intercepto),aes(x = x, y = y), color = \"red\", label = round(Intercepto,2), nudge_y = 0, nudge_x = 1) +\n  geom_vline(xintercept = 0, lty = 2) +\n  geom_point(x = 5, y = (Intercepto + 5*Beta), color = \"red\") +\n  geom_point(x = 6, y = (Intercepto + 6*Beta), color = \"red\") +\n  annotate(geom = \"segment\", x = 5, y = (Intercepto + 5*Beta), xend = 6, yend = (Intercepto + 5*Beta), color = \"red\") +\n  annotate(geom = \"segment\", x = 6, y = (Intercepto + 5*Beta), xend = 6, yend = (Intercepto + 6*Beta), color = \"red\") +\n  annotate(geom = \"text\",x = 5.5, y = 6.5, label = paste(\"Delta\", \"== 1\"), parse = TRUE, color = \"red\") +\n  annotate(geom = \"text\",x = 6.6, y = 6.85, label = paste(\"Delta ==\", round(Beta, 2)), parse = TRUE, color = \"red\")\n```\n```{r, echo = F, results='asis'}\nequatiomatic::extract_eq(Modelo, use_coefs = T)\n```\n\n## Que significa que p sea menor a 0.05\n\n```{r, echo = F}\nkable(Parametros, row.names = FALSE) %>% kable_styling(bootstrap_options = \"striped\")\n```\n\n```{r echo=F, fig.height=3.5, fig.width=7, fig.align='center'}\nsjPlot::plot_model(model = Modelo, show.intercept = T) + theme_bw()\n```\n\n## Que significa que p sea menor a 0.05\n\n```{r}\nggplot(Data, aes(y = Altura, x = DAP)) + geom_point() + geom_smooth(method = \"lm\") + theme_bw()\n```\n\n# Dudas?\n\n## Varianza explicada \n\n```{r, eval = FALSE}\nglance(Modelo)\n```\n\n```{r, echo = F}\nkable(glance(Modelo), digits = 3) %>% kable_styling(bootstrap_options = \"striped\")\n```\n```{r, echo = FALSE, fig.height=3.8, fig.width=7, fig.align='center'}\nData$Pred <- predict(Modelo, Data)\n\nggplot(Data, aes(x = DAP, y = Altura)) + \n  geom_linerange(aes(ymin = Altura, ymax = Pred), lty = 2, color = \"red\") +\n  geom_point() +\n  geom_path(aes(y = Pred)) +\n  theme_bw()\n```\n\n## R2\n\n```{r, echo = F}\nSDs <- c(2,21,41, 61, 81, 101)\n\nDF <- list()\n\nfor(i in 1:length(SDs)){\n  x <- 1:100\n  set.seed(2020)\n  y <- 2.5*x + rnorm(n = 100, sd = SDs[i])\n  DF[[i]] <- data.frame(x = x, y = y, R2 =NA, Beta = NA, Intercepto = NA)\n  Temp <- lm(y ~ x, data = DF[[i]])\n  DF[[i]]$R2 <- glance(Temp) %>% pull(r.squared) %>% round(2)\n  DF[[i]]$Beta <- tidy(Temp) %>% dplyr::filter(term != \"(Intercept)\") %>% pull(estimate)\n  DF[[i]]$Intercepto <- tidy(Temp) %>% dplyr::filter(term == \"(Intercept)\") %>% pull(estimate)\n}\n\nDF <- DF %>% reduce(bind_rows)\n\n\nggplot(DF, aes(x = x, y = y)) + \n  geom_point() +\n  geom_smooth(method = \"lm\") + \n  facet_wrap(~R2) + \n  theme_bw()\n```\n\n\n## Puede ser negativo\n\n```{r, echo = F}\nSDs <- c(2,41,81, 121, 161, 201)\n\nDF <- list()\n\nfor(i in 1:length(SDs)){\n  x <- 1:100\n  set.seed(2020)\n  y <- -5*x + rnorm(n = 100, sd = SDs[i])\n  DF[[i]] <- data.frame(x = x, y = y, R2 =NA, Beta = NA, Intercepto = NA)\n  Temp <- lm(y ~ x, data = DF[[i]])\n  DF[[i]]$R2 <- glance(Temp) %>% pull(r.squared) %>% round(2)\n  DF[[i]]$Beta <- tidy(Temp) %>% dplyr::filter(term != \"(Intercept)\") %>% pull(estimate)\n  DF[[i]]$Intercepto <- tidy(Temp) %>% dplyr::filter(term == \"(Intercept)\") %>% pull(estimate)\n}\n\nDF <- DF %>% reduce(bind_rows)\n\n\nggplot(DF, aes(x = x, y = y)) + \n  geom_point() +\n  geom_smooth(method = \"lm\") + \n  facet_wrap(~R2) + \n  theme_bw()\n```\n\n\n## Datos de temperatura y humedad\n\n```{r}\ngithubURL <- (\"https://raw.githubusercontent.com/derek-corcoran-barrios/derek-corcoran-barrios.github.io/master/Clase4/TempHum.rds\")\ndownload.file(githubURL,\"TempHum.rds\", method=\"curl\")\nTempHum <- read_rds(\"TempHum.rds\") %>% \n  mutate(Mes = as.numeric(Mes))\n```\n\n```{r, echo = F, include=FALSE}\nfile.remove(\"TempHum.rds\")\n```\n\n## Datos Valdivia\n\n```{r}\nlibrary(tidyverse)\nVA <- TempHum %>% filter(Ciudad_localidad == \"Valdivia\") \n```\n\n```{r, echo = FALSE}\nkable(VA) %>% kable_styling(bootstrap_options = c(\"striped\")) %>%\n  scroll_box(width = \"800px\", height = \"350px\")\n```\n\n## Modelo lineal?\n\n```{r}\nggplot(VA, aes(x = Mes, y = Temperatura)) + geom_point() +  stat_smooth(method = \"lm\") \n```\n\n## Ecuación cuadrática\n\n```{r, echo=FALSE, out.width=\"400px\", fig.align='center'}\nlibrary(knitr)\ninclude_graphics(\"https://raw.githubusercontent.com/derek-corcoran-barrios/derek-corcoran-barrios.github.io/master/Clase4/Cuadratica.png\")\n```\n\n\n## stat_smooth más control que geom_smooth\n\n```{r}\nggplot(VA, aes(x = Mes, y = Temperatura)) + geom_point() +  stat_smooth(method = \"lm\", formula = y ~ x + I(x^2)) \n```\n\n# Regresión lineal, forma cuadrática\n\n## Regresión\n\n```{r}\nModeloCuad <- lm(Temperatura ~ Mes + I(Mes^2), data = VA)\nParametros <- tidy(ModeloCuad)\n```\n\n```{r, echo = F}\nkable(Parametros) %>% kable_styling(bootstrap_options = \"striped\")\n```\n\n## Varias formas\n\n```{r, echo = F}\nlibrary(patchwork)\n\nDF <- data.frame(x = 1:100)\n\nA <- ggplot(DF, aes(x = x)) + geom_function(fun = function(x) 2 + x) + ggtitle(\"y ~ x\") +\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        axis.title.y=element_blank(),\n        axis.text.y=element_blank(),\n        axis.ticks.y=element_blank())\nB <- ggplot(DF, aes(x = x)) + geom_function(fun = function(x) 50 + -0.5*x^2 + 50*x) + ggtitle(\"y ~ x + I(x^2)\") +\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        axis.title.y=element_blank(),\n        axis.text.y=element_blank(),\n        axis.ticks.y=element_blank())\nC <- ggplot(DF, aes(x = x)) + geom_function(fun = function(x) 50 + 0.5*x^2 + -50*x) + ggtitle(\"y ~ x + I(x^2)\") +\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        axis.title.y=element_blank(),\n        axis.text.y=element_blank(),\n        axis.ticks.y=element_blank())\nD <- ggplot(DF, aes(x = x)) + geom_function(fun = function(x) 50 + -0.5*x^2) + ggtitle(\"y ~I(x^2)\") +\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        axis.title.y=element_blank(),\n        axis.text.y=element_blank(),\n        axis.ticks.y=element_blank())\nE <- ggplot(DF, aes(x = x)) + geom_function(fun = function(x) 50 + 0.5*x^2) + ggtitle(\"y ~I(x^2)\") +\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        axis.title.y=element_blank(),\n        axis.text.y=element_blank(),\n        axis.ticks.y=element_blank())\nG <- ggplot(DF, aes(x = x)) + geom_function(fun = function(x)  -76 + 17*log(x) + -0.02*x) + ggtitle(\"y ~ x + I(log(x))\") +\n  theme(axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        axis.title.y=element_blank(),\n        axis.text.y=element_blank(),\n        axis.ticks.y=element_blank())\n\n(A + B + C) / (D + E + G)\n```\n\n\n# Pivoting\n\n## Que podemos hacer con tidyr??\n\n```{r}\nlibrary(tidyr)\nSan <- TempHum %>% filter(Ciudad_localidad == \"Quinta Normal\") %>%  pivot_longer(cols = c(Temperatura, Humedad),names_to= \"Unidad\", values_to = \"medida\")\n```\n\n## Que podemos hacer con tidyr?? (Cont.)\n\n```{r}\nggplot(San, aes(x = Mes, y = medida)) + geom_point() +  stat_smooth(method = \"lm\", formula = y ~ x + I(x^2), aes(fill = Unidad, color = Unidad)) \n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"ioslides_presentation":{"incremental":"yes","widescreen":"yes"}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"Clase5Regresion.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","theme":"cosmo","title":"Regresiones lineales y pivots","author":"Derek Corcoran","date":"`r format(Sys.time(), '%d/%m, %Y')`"},"extensions":{"book":{"multiFile":true}}}}}