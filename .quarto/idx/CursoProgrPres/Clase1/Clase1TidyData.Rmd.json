{"title":"Clase 1 El tidyverse","markdown":{"yaml":{"title":"Clase 1 El tidyverse","author":"Horacio Samaniego","date":"`r format(Sys.time(), '%d/%m, %Y')`","output":{"ioslides_presentation":{"widescreen":true,"incremental":true,"logo":"LogoRverso.jpeg"}}},"headingText":"Bienvenida","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = FALSE, tidy = TRUE, tidy.opts = list(width.cutoff = 50))\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(kableExtra)\noptions(\"kableExtra.html.bsTable\" = T)\n```\n\n\n## Curso: Introducción al Análisis y manipulación de datos geoespaciales {.build}\n\nPrimeros pasos\n\n* ¿Quien no ha usado nunca R? [Swirl](https://www.youtube.com/watch?v=w6L7Ye18yPE&feature=youtu.be)\n* Evaluación sencilla (Informes reproducibles + presentación reproducible)\n* Evaluación por pares (Quien evalua a los evaluadores)\n* Mucho trabajo personal guiado\n* Pagina donde esta [todo el curso](https://derek-corcoran-barrios.github.io/CursoProgramacion/_book/index.html)\n\n# Como se organizan los datos en R\n\n## Estructura de datos {.build}\n\n<div style=\"float: left; width: 40%;\">\n\n- Vector: Un conjunto lineal de datos (secuencia génica, serie de tiempo)\n- Matrix: Una tabla con solo números\n- Data Frame: Una tabla donde cada columna tiene un tipo de datos (estándar dorado)\n- List: Aqui podemos meter lo que queramos\n\n</div>\n\n<div style=\"float: right; width: 60%;\">\n\n```{r, echo = FALSE}\nknitr::include_graphics(\"Data.png\")\n```\n\n</div>\n\n## Vector {.build}\n\n<div style=\"float: left; width: 40%;\">\n\n* Secuencia lineal de datos\n* Pueden ser de muchos tipos (numéricos, de carácteres, lógicos, etc.)\n* Ejemplo data(uspop)\n* para crear uno c(1,4,6,7,8)\n* para subsetear un vector se pone el índice entre []\n* uspop[4], uspop[2:10], uspop[c(3,5,8)]\n\n</div>\n\n<div style=\"float: right; width: 60%;\">\n\n```{r, echo = FALSE}\nknitr::include_graphics(\"Vector.jpg\")\n```\n\n</div>\n\n# Lo entendimos?\n\n## Ejercicio\n\n\n## Respuesta\n\n\n\n## Data Frame {.build}\n\n<div style=\"float: left; width: 40%;\">\n\n* Una tabla, cada columna un tipo de datos (Numérico, lógico, etc)\n* Cada columna un vector\n* Ejemplo data(iris)\n* Para subsetear data.frame[filas,columnas]\n* Ejemplos iris[,3], iris[\"Petal.Length\"], iris[2:5,c(1,5)], iris$Petal.Length\n\n\n</div>\n\n<div style=\"float: right; width: 60%;\">\n\n```{r, echo = FALSE}\nknitr::include_graphics(\"DataFrame.jpg\")\n```\n\n</div>\n\n## Ejercicio {.small}\n\n```{r, echo = F}\nset.seed(2020)\nDF <- data.frame(Numero = sample(1:5, size =5, replace = F), Letra = sample(LETTERS, size = 5, replace = F), Medida = rnorm(n = 5, mean = 60, sd = 10) ,stringsAsFactors = F)\n\nkable(DF, digits = 2) %>% kable_styling(bootstrap_options = c(\"striped\"), full_width = F)\n```\n\n## Alternativas\n\n\n## Respuesta\n\n\n# Principios de Tidydata\n\n## Tidy Data  {.build}\n\n```{r, echo = FALSE}\nknitr::include_graphics(\"tidy.png\")\n```\n\n\n* Cada columna una variable\n* Cada fila una observación\n\n# Trabajemos tidy\n\n## dplyr {.build}\n\n* Paquete con pocas funciones [muy poderosas](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf) para ordenar datos \n* Parte del [tidyverse](https://www.tidyverse.org/)\n\n- *group_by* (agrupa datos)\n- *summarize* (resume datos agrupados)\n- *filter* (Encuentra filas con ciertas condiciones)\n- *select* junto a *starts_with*, *ends_with* o *contains*\n- *mutate* (Genera variables nuevas)\n- *pipe*: *%>%* o bien *|>* (de uso mas reciente) \n- *arrange* ordenar\n\n## summarize y group_by {.build .small}\n\n- *group_by* reune observaciones según una variable\n- *summarize* resume una variable\n\n```{r, eval=FALSE, echo = TRUE}\nlibrary(tidyverse)\nSummary.Petal <- summarize(iris, Mean.Petal.Length = mean(Petal.Length), SD.Petal.Length = sd(Petal.Length))\n```\n\n\n```{r, echo = FALSE}\nlibrary(dplyr)\nlibrary(knitr)\nSummary.Petal <- summarize(iris, Mean.Petal.Length = mean(Petal.Length), SD.Petal.Length = sd(Petal.Length))\n\nkable(Summary.Petal) %>% kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F)\n```\n\n## summarize y group_by (continuado) {.small .build}\n\n```{r, eval = FALSE}\nSummary.Petal <- group_by(iris, Species)\nSummary.Petal <- summarize(Summary.Petal, Mean.Petal.Length = mean(Petal.Length), SD.Petal.Length = sd(Petal.Length))\n```\n\n\n```{r, echo = FALSE}\nlibrary(dplyr)\nlibrary(knitr)\nSummary.Petal <- group_by(iris, Species)\nSummary.Petal <- summarize(Summary.Petal, Mean.Petal.Length = mean(Petal.Length), SD.Petal.Length = sd(Petal.Length))\nkable(Summary.Petal) %>% kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F)\n```\n\n## summarize y group_by (continuado) {.small .build}\n   \n* Pueden agrupar por más de una variable a la vez\n\n```{r, eval = FALSE}\ndata(\"mtcars\")\nMtcars2 <- group_by(mtcars, am, cyl)\nConsumo <- summarize(Mtcars2, Consumo_promedio = mean(mpg), desv = sd(mpg))\n```\n\n\n```{r, echo = FALSE}\n\ndata(\"mtcars\")\nMtcars2 <- group_by(mtcars, am, cyl)\nConsumo <- summarize(Mtcars2, Consumo_promedio = mean(mpg), desv = sd(mpg))\nkable(Consumo) %>% kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F)\n```\n\n# Dudas?\n\n## mutate {.small}\n\n* Crea variables nuevas\n\n```{r, eval = FALSE}\nDF <- mutate(iris, Petal.Sepal.Ratio = Petal.Length/Sepal.Length)\n```\n\n```{r, echo = FALSE}\nDF <- mutate(iris, Petal.Sepal.Ratio = round((Petal.Length/Sepal.Length),2))\n\nkable(DF[seq(from = 15, to = 150, length.out = 10),], row.names = FALSE) %>% kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F) %>% scroll_box(width = \"900px\", height = \"200px\")\n```\n\n## Pipeline (%>%) {.small .build}\n\n- Para realizar varias operaciones de forma secuencial \n- sin recurrir a parentesis anidados \n- sobrescribir multiples bases de datos\n\n```{r, eval=FALSE}\nx <- c(1,4,6,8)\ny <- round(mean(sqrt(log(x))),2)\n```\n\n- Que hice ahí?\n\n```{r, eval=FALSE}\nx <- c(1,4,6,8)\ny <- x %>% log() %>% sqrt() %>% mean() %>% round(2)\n```\n\n```{r, echo=FALSE}\nx <- c(1,4,6,8)\nx %>% log() %>% sqrt() %>% mean() %>% round(2)\n```\n\n## Pipeline (%>%) {.small .build}\n\n* Muchos objetos intermedios\n\n```{r, eval=FALSE}\nDF <- mutate(iris, Petal.Sepal.Ratio = Petal.Length/Sepal.Length)\nBySpecies <- group_by(DF, Species)\nSummary.Byspecies <- summarize(BySpecies, MEAN = mean(Petal.Sepal.Ratio), SD = sd(Petal.Sepal.Ratio))\n```\n\n\n```{r, echo=FALSE}\nDF <- mutate(iris, Petal.Sepal.Ratio = Petal.Length/Sepal.Length)\nBySpecies <- group_by(DF, Species)\nSummary.Byspecies <- summarize(BySpecies, MEAN = mean(Petal.Sepal.Ratio), SD = sd(Petal.Sepal.Ratio))\nkable(Summary.Byspecies) %>% kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F)\n```\n\n## Pipeline (%>%) {.small .build}\n\n* Con pipe\n\n```{r, eval=FALSE}\nSummary.Byspecies <- summarize(group_by(mutate(iris, Petal.Sepal.Ratio = Petal.Length/Sepal.Length), Species), MEAN = mean(Petal.Sepal.Ratio), SD = sd(Petal.Sepal.Ratio))\n```\n\n\n```{r, echo=FALSE}\nSummary.Byspecies <- summarize(group_by(mutate(iris, Petal.Sepal.Ratio = Petal.Length/Sepal.Length), Species), MEAN = mean(Petal.Sepal.Ratio), SD = sd(Petal.Sepal.Ratio))\n\nkable(Summary.Byspecies) %>% kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F)\n```\n\n\n## Pipeline (%>%) otro ejemplo\n\n```{r, eval=FALSE}\nlibrary(tidyverse)\nMEAN <- iris %>% group_by(Species) %>% summarize_all(.funs = list(Mean = mean, SD =sd))\n```\n\n```{r, echo=FALSE}\nlibrary(dplyr)\nlibrary(knitr)\nMEAN <- iris %>% group_by(Species) %>% summarize_all(.funs = list(Mean = mean, SD =sd))\nkable(MEAN) %>% kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F)\n```\n# Mas dudas?\n\n## Filter {.build}\n\n- Selecciona según una o más variables\n\n```{r, echo=FALSE}\nDF <- data.frame(simbolo = c(\">\", \"<\", \"==\", \">=\", \"<=\"), significado = c(\"Mayor que\", \"Menor que\", \"Igual a\", \"mayor o igual a\", \"menor o igual a\"), simbolo_cont = c(\"!=\",\"%in%\", \"is.na\", \"!is.na\", \"| &\"), significado_cont = c(\"distinto a\", \"dentro del grupo\", \"es NA\", \"no es NA\", \"o, y\"))\nkable(DF) %>% kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F)\n```\n\n## Ejemplos de filter agregando a lo anterior {.small}\n\n```{r, eval = FALSE}\ndata(\"iris\")\nDF <- iris %>% filter(Species != \"versicolor\") %>% group_by(Species) %>% summarise_all(mean)\n```\n\n```{r, echo = FALSE}\nlibrary(dplyr)\ndata(\"iris\")\nDF <- iris %>% filter(Species != \"versicolor\") %>% group_by(Species) %>% summarise_all(mean)\nkable(DF) %>% kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F)\n```\n\n## Ejemplos de filter {.small}\n\n```{r, eval = FALSE}\nDF <- iris %>% filter(Petal.Length >= 4 & Sepal.Length >= 5) %>% group_by(Species) %>% summarise(N = n())\n```\n\n```{r, echo = FALSE}\nDF <- iris %>% filter(Petal.Length >= 4 & Sepal.Length >= 5) %>% group_by(Species) %>% summarise(N = n())\nkable(DF) %>% kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F)\n```\n\n\n## Más de una función {.small}\n\n```{r, eval = FALSE}\ndata(\"iris\")\nDF <- iris %>% filter(Species != \"versicolor\") %>% group_by(Species) %>% summarise_all(.funs= list(Mean  = mean, SD = sd))\n```\n\n```{r, echo = FALSE}\nlibrary(dplyr)\ndata(\"iris\")\nDF <- iris %>% filter(Species != \"versicolor\") %>% group_by(Species) %>% summarise_all(.funs= list(Mean  = mean, SD = sd))\nkable(DF) %>% kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F)\n```\n\n## Select {.small .build}\n\n\n* Selecciona columnas dentro de un data.frame, se pueden restar\n\n```{r, eval=FALSE}\niris %>% group_by(Species) %>% select(Petal.Length, Petal.Width) %>% summarize_all(mean)\n```\n\n```{r, eval=FALSE}\niris %>% group_by(Species) %>% select(-Sepal.Length, -Sepal.Width) %>% summarize_all(mean)\n```\n\n```{r, eval=FALSE}\niris %>% group_by(Species) %>% select(contains(\"Petal\")) %>% summarize_all(mean)\n```\n\n```{r, eval=FALSE}\niris %>% group_by(Species) %>% select(-contains(\"Sepal\")) %>% summarize_all(mean)\n```\n\n```{r, echo = FALSE}\nDF <- iris %>% group_by(Species) %>% select(-contains(\"Sepal\")) %>% summarize_all(mean)\n```\n\n## Resultado\n\n```{r, echo = FALSE}\nkable(DF) %>% kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F)\n```\n\n\n# \n\n## Ejercicios {.build .small}\n\n```{r}\nCasos_Activos <- read_csv(\"https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto19/CasosActivosPorComuna_std.csv\")\n```\n\n\nUsando la base de datos del repositorio del ministerio de ciencias, genera un dataframe que responda lo siguiente:\n\n* ¿Que proporción de las comunas ha tenido en algun momento mas de 50 casos por cada 100.000 habitantes?\n* Genera un dataframe, donde aparezca para cada comuna que haya tenido sobre 50 casos por cada 100.000 habitantes, cuantos días ha tenido sobre ese valor.\n* Genera una tabla de cuales comunas han tenido sobre 50 casos por cada 100.000 habitantes y de esas comunas crea una variable que sea la prevalencia máxima de dicha comuna.\n\n## **Bonus** (Esto requiere investigar no basta con lo que aprendimos)\n\n* Ve cuales son las 10 comunas que han tenido la mayor mediana de prevalencia, para cada una de estas 10 comunas, genera una tabla con la mediana, prevalencia máxima y fecha en que se alcanzó la prevalencia máxima\n\n* Nos vemos a las 12:45\n\n## Para la otra clase, es necesario: {.small .build}\n\n\n* Crearse cuenta de [github](https://github.com/)\n* Instalar los paquetes knitr, rmarkdown y kableExtra\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"ioslides_presentation":{"widescreen":true,"incremental":true,"logo":"LogoRverso.jpeg"}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"Clase1TidyData.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","theme":"cosmo","title":"Clase 1 El tidyverse","author":"Horacio Samaniego","date":"`r format(Sys.time(), '%d/%m, %Y')`"},"extensions":{"book":{"multiFile":true}}}}}